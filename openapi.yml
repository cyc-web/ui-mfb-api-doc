openapi: '3.0.2'
info:
  title: BE-STUBBORN API DOCS
  description: This web app is design in the form of e-library where users can purchase different kinds of books
  version: "1.0"
  termsOfService: http://bestubborn.me/terms
  contact:
    name: BE-STUBBORN Team
    url: http://bestubborn.me/contact-us
    email: support@bestubborn.me
servers:
  - url: http://bestubborn.me/api
    description: base url

paths:
  /register/{ref?}:
    post:
      summary: create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /login:
    post:
      requestBody:
        description: "login to get started"
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound' 
        '500':
          $ref: '#/components/responses/ServerError'
  /profile/update:
    post:
      security:
        - bearerAuth: []
      
      requestBody:
        description: "login to get started"
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                phone:
                  type: string
                biography:
                  type: string
                social_media:
                  type: array
                  example: ['facebook', 'twitter']
                profilePicture:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound' 
        '500':
          $ref: '#/components/responses/ServerError'
  /forgot_password:
    post:
      requestBody:
        description: "Reset your password"
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                email:
                  type: string
                
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound' 
        '500':
          $ref: '#/components/responses/ServerError'
  /switchRole:
    post:
      requestBody:
        description: "Switch your role"
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                user_type:
                  type: string
                
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound' 
        '500':
          $ref: '#/components/responses/ServerError'
  /change_password:
    post:
      requestBody:
        description: "Change password"
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                code:
                  type: string
                password:
                  type: string
                password_confirmation:
                  type: string
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound' 
        '500':
          $ref: '#/components/responses/ServerError'
  /changePassword:
    post:
      security:
        - bearerAuth: []
      
      requestBody:
        description: "Change current password"
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                current_password:
                  type: string
                password:
                  type: string
                password_confirmation:
                  type: string
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound' 
        '500':
          $ref: '#/components/responses/ServerError'
  /logout:
    post:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK 
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /profile:
    get:
      security:
        - bearerAuth: []
      description: 'Get current login user'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                  id:
                    type: integer
                  created_at:
                    type: timestamp   
                  updated_at:
                    type: timestamp
                  biography:
                    type: string
                  social_media:
                    type: array
                  profilePicture:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound' 
        '500':
          $ref: '#/components/responses/ServerError'
  /book:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "create new book"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        '201':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnProcessAble'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      security:
        - bearerAuth: []
      description: 'Get all books created by the login user'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
                  id:
                    type: integer
                  created_at:
                    type: timestamp   
                  updated_at:
                    type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /book/{id}:
    get:
      security:
        - bearerAuth: []
      description: 'Get book by id'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
                  id:
                    type: integer
                  created_at:
                    type: timestamp   
                  updated_at:
                    type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      security:
        - bearerAuth: []
      
      requestBody:
        description: "update book by id"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        '200':
          description: Ok
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /article:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "create new article"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Article"
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      security:
        - bearerAuth: []
      description: 'Get all articles created by the login user'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Article"
                  id:
                    type: integer
                  created_at:
                    type: timestamp   
                  updated_at:
                    type: timestamp 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /article/{id}/like:
    post:
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /article/{id}/unlike:
    post:
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /book/{id}/like:
    post:
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /book/{id}/unlike:
    post:
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /audio:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "create new audio material"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Audio"
              tags:
                $ref: "#/components/schemas/Tag"
              categories:
                $ref: "#/components/schemas/Category"
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      security:
        - bearerAuth: []
      description: 'Get all audio materials created by the login user'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Audio"
                  tags:
                    $ref: "#/components/schemas/Tag"
                  categories:
                    $ref: "#/components/schemas/Category"
                  id:
                    type: integer
                  created_at:
                    type: timestamp   
                  updated_at:
                    type: timestamp 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /video:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "create new video material"
        required: true
        content:
          "application/json":
            schema:
              type: array
              properties:
                  videos:
                    type: array
                    items:
                      default:
                        videos:
                          $ref: "#/components/schemas/Video"
                        tags:
                          $ref: "#/components/schemas/Tag"
                        categories:
                          $ref: "#/components/schemas/Category"    
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      security:
        - bearerAuth: []
      description: 'Get all video materials created by the login user'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Video"
                  tags:
                    $ref: "#/components/schemas/Tag"
                  categories:
                    $ref: "#/components/schemas/Category"
                  id:
                    type: integer
                  created_at:
                    type: timestamp   
                  updated_at:
                    type: timestamp 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /articles/all: 
    get:
      
      description: 'Get all articles'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Article"
                  id:
                    type: integer
                  counter:
                    type: integer
                  likes:
                    type: string
                  unlike:
                    type: string
                  likeUser:
                    type: string
                  unLikeUser:
                    type: string
                  created_at:
                    type: timestamp 
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /book/preview/{id}: 
    get:
      description: 'Get book by id'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                default:
                  id:
                    type: integer
                  title:
                    type: string
                  description:
                    type: string
                  isbn:
                    type: string
                  author:
                    type: string
                  message:
                    type: string
                  bookType:
                    type: array
                    items:
                      enum:
                        - soft copy
                        - hard copy
                  amount:
                    type: array
                    items:
                      enum:
                        - softCopy
                        - hardCopy
                  created_at:
                    type: timestamp 
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /articles/{id}: 
    get:
     
      description: 'Get article by id'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Article"
                  id:
                    type: integer
                  counter:
                    type: integer
                  likes:
                    type: string
                  unlike:
                    type: string
                  likeUser:
                    type: string
                  unLikeUser:
                    type: string
                  created_at:
                    type: timestamp 
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /article/{id}: 
    get:
      security:
        - bearerAuth: []
      description: 'Get article by id'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Article"
                  id:
                    type: integer
                  counter:
                    type: integer
                  likes:
                    type: string
                  unlike:
                    type: string
                  likeUser:
                    type: string
                  unLikeUser:
                    type: string
                  created_at:
                    type: timestamp   
                  updated_at:
                    type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      security:
        - bearerAuth: []
      requestBody:
        description: "update article with id"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Article"
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /article/{id}/comment:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "create new comment"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      
  /article/comment/{id}/edit:
    get:
      security:
        - bearerAuth: []
      description: "edit comment"    
      responses:
        '201':
          description: Ok 
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Comment"
                id:
                  type: integer
                article_id:
                  type: integer
                comment_by:
                  type: string
                status:
                  type: string
                created_at:
                  type: timestamp
                updated_at:
                  type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /article/comment/{id}/update:
    patch:
      security:
        - bearerAuth: []
      requestBody:
        description: "update comment"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Comment"
              article_id:
                type: integer              
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      
  /article/comment/{id}/delete: 
    delete:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /book/{id}/comment:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "create new comment"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      
  /book/comment/{id}/edit:
    get:
      security:
        - bearerAuth: []
      description: "edit comment"    
      responses:
        '201':
          description: Ok 
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Comment"
                id:
                  type: integer
                article_id:
                  type: integer
                comment_by:
                  type: string
                status:
                  type: string
                created_at:
                  type: timestamp
                updated_at:
                  type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /book/comment/{id}/update:
    patch:
      security:
        - bearerAuth: []
      requestBody:
        description: "update comment"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Comment"
              article_id:
                type: integer              
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /events:
    get:
      description: get all events
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
                  id:
                    type: integer
                  created_at:
                    type: timestamp
                  updated_at:
                    type: timestamp
                  status:
                    type: number
                    description: "1 is active and 0 is inactive"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'  
  //event/{id}/users:
    get:
      description: get all users registered for a particular event
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventUser'
                  id:
                    type: integer
                  created_at:
                    type: timestamp
                  updated_at:
                    type: timestamp
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'  
  /event:
    post:
      security:
        - bearerAuth: []
      
      requestBody:
        description: "create new event"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'  
  /event/id:
    get:
      security:
        - bearerAuth: []
      description: 'Get an event by id'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
                  id:
                    type: integer
                  status:
                    type: integer
                  created_at:
                    type: timestamp   
                  updated_at:
                    type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      security:
        - bearerAuth: []
      
      requestBody:
        description: "update an event"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Event"
              status:
                type: number
                example: "1 is active and 0 is inactive"
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
   
  /book/comment/{id}/delete: 
    delete:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /audio/{id}: 
    get:
      security:
        - bearerAuth: []
      description: 'Get audio material by id'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Audio"
                  id:
                    type: integer
                  tags:
                    $ref: "#/components/schemas/Tag"
                  categories:
                    $ref: "#/components/schemas/Category"
                  created_at:
                    type: timestamp   
                  updated_at:
                    type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      security:
        - bearerAuth: []
      requestBody:
        description: "update audio material with id"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Audio"
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /video/{id}: 
    get:
      security:
        - bearerAuth: []
      description: 'Get video material by id'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Video"
                  id:
                    type: integer
                  tags:
                    $ref: "#/components/schemas/Tag"
                  categories:
                    $ref: "#/components/schemas/Category"
                  created_at:
                    type: timestamp   
                  updated_at:
                    type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      security:
        - bearerAuth: []
      requestBody:
        description: "update video material with id"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Video"
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /categories:
    get:
      description: get all available categories
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
                  id:
                    type: integer
                  created_at:
                    type: timestamp
                  updated_at:
                    type: timestamp
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /tags:
    get:
      description: get all available tags
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
                  id:
                    type: integer
                  created_at:
                    type: timestamp
                  updated_at:
                    type: timestamp
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /authors:
    get:
      description: get all authors
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                  id:
                    type: integer
                  created_at:
                    type: timestamp
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /events/all:
    get:
      description: get all events
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
                  id:
                    type: integer
                  created_at:
                    type: timestamp
                  updated_at:
                    type: timestamp
                  status:
                    type: number
                    description: "1 is active and 0 is inactive"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /event/{id}/register:
    post:
      requestBody:
        description: "create new audio material"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/EventUser"
      responses:
        '201':
          description: Ok 
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /author/{id}:
    get:
      description: get all author by id
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                  id:
                    type: integer
                  created_at:
                    type: timestamp
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /books/all:
    get:
      description: get all available books
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  default:
                    id:
                      type: integer
                    title:
                      type: string
                    author:
                      type: string
                    description:
                      type: string
                    created_at:
                      type: timestamp
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /audio/all:
    get:
      description: get all available audio material
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  default:
                    id:
                      type: integer
                    title:
                      type: string
                    owner:
                      type: string
                    stream_type:
                      type: string
                    amount:
                      type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /audio/preview/{id}:
    get:
      description: preview available audio material by id
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Audio"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /video/all:
    get:
      description: get all available audio material
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  default:
                    id:
                      type: integer
                    title:
                      type: string
                    owner:
                      type: string
                    stream_type:
                      type: string
                    amount:
                      type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /video/preview/{id}:
    get:
      description: preview available video material by id
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Video"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /books/mine:
    get:
      security:
        - bearerAuth: []
      
      description: get all purchased books
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
                  access_duration:
                    type: string
                  access_time_spent:
                    type: string
                  access_status:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /books/mine/{id}:
    get:
      security:
        - bearerAuth: []
      
      description: get all purchased book by id
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
                  access_duration:
                    type: string
                  access_time_spent:
                    type: string
                  access_status:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /my-audio:
    get:
      security:
        - bearerAuth: []
      
      description: get all purchased audio material
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Audio'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /my-audio/stream/{id}:
    get:
      security:
        - bearerAuth: []
      
      description: stream audio material by id
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Audio'
                  id:
                    type: integer
                  created_at:
                    type: timestamp
                  updated_at:
                    type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /my-video:
    get:
      security:
        - bearerAuth: []
      
      description: get all purchased video material
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Video'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /my-video/stream/{id}:
    get:
      security:
        - bearerAuth: []
      
      description: stream video material by id
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Video'
                  id:
                    type: integer
                  created_at:
                    type: timestamp
                  updated_at:
                    type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /purchase:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "purchasing new book"
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                  books:
                    type: array
                    items:
                      default:
                        objectType:
                          type: string
                          example: "objectType='book', objectType='audio', objectType='video'"
                        id:
                          type: integer
                        ref_no:
                          type: string
                        itemTotal:
                          type: number
                        oneTimePayment:
                          type: number
                        quantity:
                          type: integer
                        bookType:
                          type: array
                          enum:
                            - 'soft copy'
                            - 'hard copy'
                        sub_type:
                          type: integer
                          enum:
                            - 1 #daily
                            - 7 #weekly
                            - 30 #monthly
                  country:
                    type: string
                  state:
                    type: string
                  city:
                    type: string
                  address:
                    type: string
                  phone:
                    type: string
                      

      responses:
        '201':
          description: Ok 
          content:
            "application/json":
              schema:
                type: array
                items:
                  default:
                    ref_no:
                      type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'    
  /checkout/{ref}:
    post:
      security:
        - bearerAuth: []
                  
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'   
  /transaction/update:
    post:      
      responses:
        '200':
          description: Ok 
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'   
  /subscribe/{ref}:
    post:
      security:
        - bearerAuth: []
                  
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'   
  /wallet:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "Update login user wallet"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Wallet"
                    
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /withdraw:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "Withdraw from wallet balance"
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                amount:
                  type: number
                    
      responses:
        '201':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  default:
                    id:
                      type: string 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /withdraw/verify:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "Withdraw from wallet balance"
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                code:
                  type: string
                id:
                  type: integer
                    
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /revoke/access:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "Revoke access"
        required: true
        content:
          "application/json":
            schema:
              default:
                code:
                  type: string
                    
      responses:
        '200':
          description: Ok 
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /update/access:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "Update access duration"
        required: true
        content:
          "application/json":
            schema:
              default:
                code:
                  type: string
                    
      responses:
        '200':
          description: Ok 
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'


          #admin endpoint start from here 
  /admin/categories:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "Create new category"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Category"
                    
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
    get:   
      security:
        - bearerAuth: []
      
      description: get all categories
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /admin/categories/{id}: 
    get:
      security:
        - bearerAuth: []
      description: 'Get category by id'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
                  id:
                    type: integer
                  created_at:
                    type: timestamp   
                  updated_at:
                    type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      security:
        - bearerAuth: []
      requestBody:
        description: "update category with id"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'    
  /admin/tags:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "Create new tag"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Tag"
                    
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
    get:   
      security:
        - bearerAuth: []
      
      description: get all tags
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /admin/tags/{id}: 
    get:
      security:
        - bearerAuth: []
      description: 'Get tag by id'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
                  id:
                    type: integer
                  created_at:
                    type: timestamp   
                  updated_at:
                    type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      security:
        - bearerAuth: []
      requestBody:
        description: "update tag with id"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Tag"
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'    
  /admin/roles:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "Create new role"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Role"
              permission:
                type: array
                    
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
    get:   
      security:
        - bearerAuth: []
      
      description: get all roles
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /admin/roles/{id}: 
    get:
      security:
        - bearerAuth: []
      description: 'Get role by id'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
                  id:
                    type: integer
                  created_at:
                    type: timestamp   
                  updated_at:
                    type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      security:
        - bearerAuth: []
      requestBody:
        description: "update role with id"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Role"
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'        
  /admin/permissions:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "Create new permission"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Permission"
                    
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
    get:   
      security:
        - bearerAuth: []
      
      description: get all permission
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /admin/permissions/{id}: 
    get:
      security:
        - bearerAuth: []
      description: 'Get permission by id'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Permission"
                  id:
                    type: integer
                  created_at:
                    type: timestamp   
                  updated_at:
                    type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      security:
        - bearerAuth: []
      requestBody:
        description: "update permission with id"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Permission"
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'        
  /admin/percentages:
    post:
      security:
        - bearerAuth: []
      requestBody:
        description: "Create new percentages"
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                  authorPercentage:
                    type: number
                  referralPercentage:
                    type: number         
                  marketing:
                    type: number         
                  website:
                    type: number         
                  platform:
                    type: number         
      responses:
        '201':
          description: Ok 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
    get:   
      security:
        - bearerAuth: []
      
      description: get all percentages
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  default:
                    id:
                      type: integer
                    authorPercentage:
                      type: number
                    referralPercentage:
                      type: number
                    created_at:
                      type: timestamp
                    updated_at:
                      type: timestamp
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'   
  /admin/percentages/{id}: 
    patch:
      security:
        - bearerAuth: []
      requestBody:
        description: "update percentage with id"
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                authorPercentage:
                  type: number
                referralPercentage:
                  type: number
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      security:
        - bearerAuth: []
      description: delete percentage
      responses:
        '200':
          description: Ok    
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
      
  /admin/articles:
    get:
      security:
        - bearerAuth: []
      description: get all articles
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
                  id:
                    type: integer
                  counter:
                    type: integer
                  likes:
                    type: string
                  unlike:
                    type: string
                  likeUser:
                    type: string
                  unLikeUser:
                    type: string
                  author:
                    type: string
                  
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /admin/articles/{id}:
    delete:
      security:
        - bearerAuth: []
      description: delete article
      responses:
        '200':
          description: Ok    
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /admin/audio:
    get:
      security:
        - bearerAuth: []
      description: get all audio material
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Audio'
                  id:
                    type: integer
                  owner:
                    type: string
                  tags:
                    type: array
                  items:
                    $ref: '#/components/schemas/Tag'
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
                  
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /admin/audio/{id}: 
    get:
      security:
        - bearerAuth: []
      description: 'Get audio material by id'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Audio"
                  id:
                    type: integer
                  created_at:
                    type: timestamp   
                  updated_at:
                    type: timestamp
                  tags:
                    type: array
                    items:
                      $ref: "#/components/schemas/Tag"
                  categories:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
   
    delete:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /admin/events:
    get:
      security:
        - bearerAuth: []
      description: get all active events
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
                  id:
                    type: integer
                  created_at:
                    type: timestamp
                  updated_at:
                    type: timestamp
                  
                  
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /admin/video:
    get:
      security:
        - bearerAuth: []
      description: get all video material
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Video'
                  id:
                    type: integer
                  owner:
                    type: string
                  tags:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
                  
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /admin/video/{id}: 
    get:
      security:
        - bearerAuth: []
      description: 'Get video material by id'
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Video"
                  id:
                    type: integer
                  created_at:
                    type: timestamp   
                  updated_at:
                    type: timestamp
                  tags:
                    type: array
                    items:
                      $ref: "#/components/schemas/Tag"
                  categories:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
   
    delete:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /admin/books:
    get:
      security:
        - bearerAuth: []
      description: get all books
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
                  id:
                    type: integer
                  likes:
                    type: string
                  unlike:
                    type: string
                  likeUser:
                    type: string
                  unLikeUser:
                    type: string
                  author:
                    type: string
                  
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /admin/books/{id}:
    delete:
      security:
        - bearerAuth: []
      description: delete book
      responses:
        '200':
          description: Ok    
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /admin/book/transactions:
    get:
      security:
        - bearerAuth: []
      description: get all book transactions
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
                  id:
                    type: integer
                  paid_by:
                    type: string
                  bookTitle:
                    type: string
                  
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /admin/sub/transactions:
    get:
      security:
        - bearerAuth: []
      description: get all subscription transactions
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
                  id:
                    type: integer
                  paid_by:
                    type: string
                  
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /admin/wallets:
    get:
      security:
        - bearerAuth: []
      description: get all subscription transactions
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  default:
                    id:
                      type: integer
                    owner:
                      type: string
                    balance:
                      type: number
                  
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /admin/transactions/report:
    get:
      security:
        - bearerAuth: []
      description: get total transactions amount
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  default:
                    totalAmountPaidForBook:
                      type: double
                    totalAmountPaidForAudio:
                      type: double
                    totalAmountPaidForVideo:
                      type: double
                    authorCurrentBalance:
                      type: double
                    authorPaymentPaidBalance:
                      type: double
                    authorPaymentPendingBalance:
                      type: double
                    websiteChargesOnAllTransactions:
                      type: double
                    marketingChargesOnAllTransactions:
                      type: double
                    platformChargesOnAllTransactions:
                      type: double
                  
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /admin/active/withdrawal:
    get:
      security:
        - bearerAuth: []
      description: get all active withdrawal requests
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  default:
                    id:
                      type: integer
                    requested_by:
                      type: string
                    account_no:
                      type: number
                    account_name:
                      type: string
                    bank_name:
                      type: string
                    amount:
                      type: number
                    created_at:
                      type: timestamp
                  
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /admin/settled/withdrawal:
    get:
      security:
        - bearerAuth: []
      description: get all settled withdrawal requests
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  default:
                    id:
                      type: integer
                    requested_by:
                      type: string
                    amount:
                      type: number
                    created_at:
                      type: timestamp
                    updated_at:
                      type: timestamp
                  
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
  /admin/users:
    get:
      security:
        - bearerAuth: []
      description: get all users
      responses:
        '200':
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/User"
                      id:
                        type: integer
                  
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError' 
    post:
      summary: create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          
      responses:
        '201':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /admin/user/{id}:
    patch:
      security:
        - bearerAuth: []
      requestBody:
        description: "update user with id"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/User"
              role:
                type: array
                items:
                  default:
                    type: integer
                example: [1,2]
              except: ["name", "phone", "address",  "user_type", "refered_by", "role"]
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /admin/active/{id}/process:
    patch:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'


components:
  schemas:
    User:
        type: object
        properties:
          name:
            type: string
          email:
            type: string
          phone:
            type: string
          address:
            type: string
          password:
            type: string
          password_confirmation:
            type: string
          user_type:
            type: string
            enum:
              - "Admin"
              - "Author"
              - "Reader"
              - "Publisher"
          referred_by:
            type: string
          role:
            type: array
            items:
              default:
                id:
                  type: integer
                name:
                  type: string
                created_at:
                  type: timestamp
        required: ["name", "email", "phone", "address", "password", password_confirmation, "user_type"]
    Book:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        bookType:
          type: array
          enum:
            - soft copy
            - hard copy
        bookCoverUrl:
          type: string
        softCopyAmount:
          type: string    #data type is double in the db
        hardCopyAmount:
          type: string   #data type is double in the db
        oneTimePayment:
          type: string   #data type is double in the db
        bookUrl:
          type: string
        isbn:
          type: string
        categories:
          type: array
          items:
            default:
              id:
                type: integer
        tags:
          type: array
          items:
            default:
              id:
                type: integer
          
    Article:
      type: object
      properties:
        title:
          type: string
        body:
          type: string
        articleCoverUrl:
          type: string
        categories:
          type: array
          items:
            default:
              id:
                type: integer
        tags:
          type: array
          items:
            default:
              id:
                type: integer
    Tag:
      type: object
      properties:
        name:
          type: string
    Comment:
      type: object
      properties:
        comments:
          type: string
        
    Category:
      type: object
      properties:
        name:
          type: string
    Role:
      type: object
      properties:
        name:
          type: string
        
    Permission:
      type: object
      properties:
        name:
          type: string
        
    Wallet:
      type: object
      properties:
        balance:
          type: number
        account_no:
          type: string
        account_name:
          type: string
        bank_name:
          type: string
    Access:
      type: object
      properties:
        access_code:
          type: array
          items:
            type: string
    Audio:
      type: object
      properties:
        title:
          type: string
        audio_url:
          type: string
        amount:
          type: number
        oneTimePayment:
          type: number
        stream_type:
          type: string
    EventUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: number
        gender:
          type: string
          
    Video:
      type: object
      properties:
        title:
          type: string
        video_url:
          type: string
        video_cover_url:
          type: string
        amount:
          type: number
        oneTimePayment:
          type: number
        stream_type:
          type: string
          
    Event:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        location:
          type: string
        links:
          type: array
          items:
            default:
              type: string
              description: "list of links and is optional"
              example: "zoom link"
        event_time:
          type: array
          items:
            default:
              type: string
              description: "array consisting date and time"
        banner:
          type: string
        contact_details:
          type: string
          
    Transaction:
      type: object
      properties:
        purpose:
          type: string
        amount:
          type: number
        ref_no:
          type: string
        status:
          type: string
        quantity:
          type: string
        bookType:
          type: array
          enum:
            - soft copy
            - hard copy
        book_id:
          type: number
    # Schema for error response body
    Error:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
      required:
        - status
        - error
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: You are not allowed to access the specified resource 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnProcessAble:
      description: The specified resource cannot be processed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT 
security:
  - bearerAuth: [] 

